  
@import "library.cocoascript";

var onRun = function(context) {
  var sketch = context.api();
  var document = sketch.selectedDocument;
  var doc = context.document;       // the current document (MSDocument)
  var plugin = context.plugin;    // the plugin (MSPluginBundle)
  var page = [doc currentPage];   // the current page (MSPage)
  var artboards = doc.currentPage().artboards();
  var numberArtboard = artboards.length;
  var Text = require('sketch/dom').Text

  // Prompt Dialog
  if(numberArtboard > 2) {
    var t = artboards[numberArtboard-1];
    if([t name] == "Table of Contents") {
      showCheckWindow(doc, plugin, page, artboards, numberArtboard, context);
    }
    else {
      addTableOfContents(doc, plugin, page, artboards, numberArtboard, context);
    }
  }

function showCheckWindow(doc, plugin, page, artboards, numberArtboard, context) {
  var alertWindow = COSAlertWindow.new()
  alertWindow.setMessageText('Do you want to refresh or delete your Table of Contents?')

  alertWindow.addButtonWithTitle('Refresh')
  alertWindow.addButtonWithTitle('Delete')


  if (alertWindow.runModal() == -NSModalResponseStop) {
    deleteTableOfContents(artboards);
    var a = doc.currentPage().artboards();
    var n = a.length;
    addTableOfContents(doc, plugin, page, a, n, context);
    [doc showMessage: "Table of Contents refreshed."]

  } else {
    deleteTableOfContents(artboards);
    [doc showMessage: "Table of Contents deleted."]
  }
}

function showAlertWindow() {
  var alertWindow = COSAlertWindow.new()

// Checkbox
var regexpRename = regexpRename || {};

regexpRename.createCheckbox = function ( label, value, flag ) {
  
  flag = ( flag == false ) ? NSOffState : NSOnState;

  var checkbox = NSButton.alloc().initWithFrame( NSMakeRect( 0, 0, 300, 18 ) );
  checkbox.setButtonType( NSSwitchButton );
  checkbox.setTitle( label );
  checkbox.setTag( value );
  checkbox.setState( flag );

  return checkbox;
}

  alertWindow.setMessageText('Create Table of Contents')

  alertWindow.addTextLabelWithValue('Enter background color')
  alertWindow.addTextFieldWithValue('#FFFFFF') 

  alertWindow.addTextLabelWithValue('Enter text color')
  alertWindow.addTextFieldWithValue('#4a4a4a') 

  alertWindow.addTextLabelWithValue('Enter margin between contents')
  alertWindow.addTextFieldWithValue('50')

  alertWindow.addTextLabelWithValue('Enter contents font size')
  alertWindow.addTextFieldWithValue('20')

  //alertWindow.addAccessoryView( regexpRename.createCheckbox( 'Add numbers to title', 'a', true ) )
  //alertWindow.addAccessoryView( regexpRename.createCheckbox( 'Show page numbers', 's', true ) )

  alertWindow.addButtonWithTitle('OK')
  alertWindow.addButtonWithTitle('Cancel')

  if (alertWindow.runModal() == -NSModalResponseStop) {
      [doc showMessage: "Table of Contents created."]
      return new UserInput(
          alertWindow.viewAtIndex(1).stringValue(),
          alertWindow.viewAtIndex(3).stringValue(),
          alertWindow.viewAtIndex(5).stringValue(),
          alertWindow.viewAtIndex(7).stringValue(),
          //alertWindow.viewAtIndex(8).state(),
          //alertWindow.viewAtIndex(9).state()
      )
  } else {
      return null
  }
}

// Dialog Results
function UserInput(bgColor, txtColor, margin, fsize) {
    this.bgColor = bgColor
    this.txtColor = txtColor
    this.margin = margin
    this.fsize = fsize
    //this.titleN = titleN
    //this.pageN = pageN
}

function deleteTableOfContents(a){
  var n = a.length
    a[n-1].removeFromParent();
    for(var i = 0; i < n-1; i++) {
      var temp = a[i];
      var l = (temp.children().toString().match(/</g) || []).length;
      
      for(var j = 0; j < l; j++) {
        if(temp.children()[j].name() == "Page Number") {
          temp.children()[j].removeFromParent();
          break;
        }
      }
    }
}

function addTableOfContents(doc, plugin, page, artboards, numberArtboard, context) {
      var userInput = showAlertWindow();
      if(userInput != null) {
        // Create New Artboard
        var currentPage = document.selectedPage
        
        var firstArtboard = artboards[numberArtboard-2];
        newArtboardWidth = [[firstArtboard frame] width]
        newArtboardHeight = [[firstArtboard frame] height]
        newArtboardX = [[firstArtboard frame] x]
        newArtboardY = [[firstArtboard frame] y] - (newArtboardHeight + 300)
        
        var newArtboardc = currentPage.newArtboard({"name" : "Table of Contents"})
        
        var view = [doc contentDrawView];
        artboards = doc.currentPage().artboards()  
        var selected_artboard = artboards[numberArtboard];
        
        var newArtboardFrame = [selected_artboard frame]
        
        [newArtboardFrame setWidth:newArtboardWidth]
        [newArtboardFrame setHeight:newArtboardHeight]
        [newArtboardFrame setX:newArtboardX]
        [newArtboardFrame setY:newArtboardY]
        
        var myStyle = new sketch.Style()
        myStyle.fills = [userInput.bgColor];

        var rect = newArtboardc.newShape({
          frame: new sketch.Rectangle(0, 0, newArtboardWidth, newArtboardHeight), 
          style: myStyle, 
          name: "background"
        });

        var textTitle = new Text({
          text: "TABLE OF CONTENTS",
          frame: new sketch.Rectangle(75, 24, newArtboardWidth, newArtboardHeight), 
          parent: selected_artboard,
          style: {
            textColor: ""+userInput.txtColor,
            fontFamily: 'SF UI Text',
            fontSize: 32,
            alignment: 'left',
          }
        });

        textTitle.systemFontSize = 32;

// var text = MSTextLayer.new();
// text.setName("Table of Contents");
// text.frame().setX(100);
// text.frame().setY(100);
// text.setStringValue("Table of Contents");
// text.adjustFrameToFit();
// selected_artboard.addLayers([shape,text]);

        var count = 0;
        var add = 0;
        var k = 1;
        var flag = 0;
        var row = Math.floor((newArtboardHeight - 105) / userInput.margin);
        var pcolor = ""+userInput.txtColor;
        
        // Create contents with all artboard names
        for(var i = 1; i < artboards.length; i++) {
          var temp = artboards[numberArtboard-1-i];
          var l = (temp.children().toString().match(/</g) || []).length;
          var testString = ""
          for(var j = 0; j < l; j++) {
            if(temp.children()[j].name() == "Header1") {
              testString = temp.children()[j].children()[1].stringValue().replace(/(\r\n\t|\n|\r\t)/gm, "");
              flag = 1;
              pcolor = "#ffffff";
              break;
            }
            if(temp.children()[j].name() == "Header2") {
              testString = temp.children()[j].children()[1].stringValue().replace(/(\r\n\t|\n|\r\t)/gm, "");
              flag = 2;
              break;
            }
          }
          var irow = i;
          var page = parseInt(i)+2
          if(page < 4) page = ""
          if(i < row) irow = i - 2;

          var titleFrame = new sketch.Rectangle(75+30*(flag-1)+userInput.margin*16*Math.floor(i/row), 105+userInput.margin*(irow%row), newArtboardWidth, newArtboardHeight);
          var pageNumberFrame = new sketch.Rectangle(userInput.margin*15+userInput.margin*16*Math.floor(i/row), 105+userInput.margin*(irow%row), newArtboardWidth, newArtboardHeight);

          var text = new Text({
            text: testString,
            frame: titleFrame,
            parent: selected_artboard,
            style: {
              textColor: ""+userInput.txtColor,
              fontFamily: 'SF UI Text',
              fontSize: userInput.fsize,
              alignment: 'left',
            }
          });

          var ptext = new Text({
            text: page+"",
            frame: pageNumberFrame,
            parent: selected_artboard,
            style: {
              textColor: ""+userInput.txtColor,
              fontFamily: 'SF UI Text',
              fontSize: userInput.fsize,
              alignment: 'left',
            }
          });

          text.systemFontSize = userInput.fsize;
          ptext.systemFontSize = userInput.fsize;

          var p = "";
          if(page !== "") p = "Page "+page;

          var pnumber = new Text({
            text: p,
            name: "Page Number",
            frame: new sketch.Rectangle(newArtboardWidth-90, newArtboardHeight-50, 50, 50), 
            parent: temp,
            style: {
              textColor: pcolor,
              fontFamily: 'SF UI Text',
              fontSize: 16,
              alignment: 'right',
            }
          });

          pnumber.systemFontSize = 16;

//           if(l <= 1) ;
//           else if(temp.children()[l-2].toString().split("Header")[1] == null) ;
//           else {

//             var header = temp.children()[l-2].toString().split("Header")[1].split(" ")[0];
//             var title = temp.children()[l-2].overrides().toString().split(" = ")[1].split('";')[0].replace('"','');
//             var page = parseInt(i)+2

//             if(header == 2 && userInput.pageN == 1) {
//                 var pnumber = new Text({
//                   text: ""+page,
//                   name: "Page Number",
//                   frame: new sketch.Rectangle(newArtboardWidth-50, newArtboardHeight-50, newArtboardWidth, newArtboardHeight), 
//                   parent: temp,
//                   style: {
//                     textColor: ""+userInput.txtColor,
//                     fontFamily: 'SF UI Text',
//                     fontSize: 16,
//                     alignment: 'right',
//                   }
//                 });
//             }

//             if(title.indexOf("cont") > -1) ;
//             else {
//               if(header == 2 && count != 0) {
//                 var titleNumber = count + "." + k + " ";
//                 if(userInput.titleN == 0) {
//                   titleNumber = "-";
//                 }
//                 var textLayer = MSTextLayer.new();
// textLayer.setName([temp name]);
// textLayer.setStringValue("    " + titleNumber + title);
// textLayer.addAttribute_value(NSFontAttributeName, NSFont.fontWithName_size("Fira Sans", userInput.fsize));
// selected_artboard.addLayers([textLayer]);

//                 k++
//               } else {
//                 count++;
//                 var titleNumber = count + ". ";
//                 if(userInput.titleN == 0) {
//                   titleNumber = "";
//                 }

// var textLayer = MSTextLayer.new();
// textLayer.setName([temp name]);
// textLayer.setStringValue(titleNumber + title);
// textLayer.addAttribute_value(NSFontAttributeName, NSFont.fontWithName_size("Fira Sans", userInput.fsize));
// selected_artboard.addLayers([textLayer]);

//                 k = 1;
//               }
//               if(userInput.pageN == 1) {
                
// var numberLayer = MSTextLayer.new();
// numberLayer.setName(page+"");
// numberLayer.setStringValue(page+"");
// numberLayer.addAttribute_value(NSFontAttributeName, NSFont.fontWithName_size("Fira Sans", userInput.fsize));
// selected_artboard.addLayers([numberLayer]);
//               }

//               // set content position
// textLayer.frame().setX(100 + 500*parseInt(add/15));
// textLayer.frame().setY(100+(add%15)*(24+parseInt(userInput.margin)) + 120);
// textLayer.setTextColor(MSImmutableColor.colorWithSVGString("#FFF").newMutableCounterpart());

//               if(userInput.pageN == 1) {
// numberLayer.frame().setX(500 + 500*parseInt(add/15));
// numberLayer.frame().setY(100+(add%15)*(24+parseInt(userInput.margin)) + 120);
// numberLayer.setTextColor(MSImmutableColor.colorWithSVGString("#FFF").newMutableCounterpart());
//               }

//               add++;
//             }
//           }
        }

        [selected_artboard select:true byExpandingSelection:false];
        [view zoomToSelection];
      }
}
}
